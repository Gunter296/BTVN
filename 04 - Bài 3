#include <bits/stdc++.h>

using namespace std;

string ltrim(const string &);
string rtrim(const string &);

/*
 * Complete the 'palindromeIndex' function below.
 *
 * The function is expected to return an INTEGER.
 * The function accepts STRING s as parameter.
 */

int palindromeIndex(string s) {
    int n = (int)s.size();
    if(n==1) return -1;
    int i=0, j=n-1, temp=1, res=-1;
    while(i < n/2)
    {
        if(s[i]!=s[j] && temp==1)
        {
            if(s[i+1]==s[j]){
                res=i;
                i+=temp;
                temp=0;
            }
            else if(s[j-1]==s[i]){
                res = j;
                j-=temp;
                temp=0;
            }
        }
        if(s[i]!=s[j] && temp!=1)
        {
            break;
        }
        i++;
        j--;
    }
    return res;
}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    string q_temp;
    getline(cin, q_temp);

    int q = stoi(ltrim(rtrim(q_temp)));

    for (int q_itr = 0; q_itr < q; q_itr++) {
        string s;
        getline(cin, s);

        int result = palindromeIndex(s);

        fout << result << "\n";
    }

    fout.close();

    return 0;
}

string ltrim(const string &str) {
    string s(str);

    s.erase(
        s.begin(),
        find_if(s.begin(), s.end(), not1(ptr_fun<int, int>(isspace)))
    );

    return s;
}

string rtrim(const string &str) {
    string s(str);

    s.erase(
        find_if(s.rbegin(), s.rend(), not1(ptr_fun<int, int>(isspace))).base(),
        s.end()
    );

    return s;
}
